version: "3.9"

services:
  postgres:
    env_file: .env
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - trane_network

  redis:
    env_file: .env
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel debug
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - trane_network

  frontend:
    env_file: .env
    build:
      context: ./trane-ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - type: bind
        source: ./trane-ui
        target: /app
        consistency: delegated
      - node_modules:/app/node_modules
      - dist:/app/dist
    networks:
      - trane_network
    depends_on:
      - redis
      - postgres
      - dsp
      - django

  django:
    env_file: .env
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    expose:
      - 8000
    volumes:
      - ./backend:/app
      - ./media:/app/media
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - trane_network

  django-migrate:
    env_file: .env
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python manage.py migrate 2>/dev/null
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      django:
        condition: service_started
    networks:
      - trane_network

  dsp:
    env_file: .env
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -m trane.realtime_dsp.dsp_service
    ports:
      - "9000:9000"
    expose:
      - 9000
    volumes:
      - ./backend:/app
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trane_network

  celery_worker:
    env_file: .env
    build:
      context: ./backend
      dockerfile: Dockerfile
    user: "${UID:-1000}:${GID:-1000}"
    command: celery -A trane worker --loglevel=debug --concurrency=2 -Q audio,midi,maintenance --without-gossip --without-mingle --without-heartbeat -O fair
    volumes:
      - ./backend:/app
      - /tmp/librosa_cache:/tmp/librosa_cache
      - /tmp/numba_cache:/tmp/numba_cache
      - ./media:/app/media
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    depends_on:
      redis:
        condition: service_healthy
      dsp:
        condition: service_started
    networks:
      - trane_network

networks:
  trane_network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  node_modules:
  dist:
